/*
 * generated by Xtext 2.13.0
 */
package aitchteeteepie.xtext.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CurlBetterThanHttpieGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CommandLineInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.CommandLineInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandLineInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHttpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cFlagsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFlagsFlagParserRuleCall_2_1_0 = (RuleCall)cFlagsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMethodMethodEnumRuleCall_3_1_0 = (RuleCall)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//CommandLineInterface:
		//	{CommandLineInterface}
		//	'http' (WS flags+=Flag)* (WS method=Method)? WS?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CommandLineInterface} 'http' (WS flags+=Flag)* (WS method=Method)? WS?
		public Group getGroup() { return cGroup; }
		
		//{CommandLineInterface}
		public Action getCommandLineInterfaceAction_0() { return cCommandLineInterfaceAction_0; }
		
		//'http'
		public Keyword getHttpKeyword_1() { return cHttpKeyword_1; }
		
		//(WS flags+=Flag)*
		public Group getGroup_2() { return cGroup_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_2_0() { return cWSTerminalRuleCall_2_0; }
		
		//flags+=Flag
		public Assignment getFlagsAssignment_2_1() { return cFlagsAssignment_2_1; }
		
		//Flag
		public RuleCall getFlagsFlagParserRuleCall_2_1_0() { return cFlagsFlagParserRuleCall_2_1_0; }
		
		//(WS method=Method)?
		public Group getGroup_3() { return cGroup_3; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3_0() { return cWSTerminalRuleCall_3_0; }
		
		//method=Method
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//Method
		public RuleCall getMethodMethodEnumRuleCall_3_1_0() { return cMethodMethodEnumRuleCall_3_1_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
	}
	public class FlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.Flag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProxyFlagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormFlagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAuthFlagParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDownloadFlagParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBodyFlagParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVersionFlagParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJsonFlagParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cHelpFlagParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cHeadersFlagParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cVerboseFlagParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTimeoutFlagParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		////WS (protocol=STRING '://')? (url=STRING (':' port=INT)? | (':' (port=INT)?)) ('/' resource=STRING)? (WS '--')? (WS items+=Item)* WS?;
		//// FLAGS
		//Flag:
		//	ProxyFlag | FormFlag | AuthFlag | DownloadFlag | BodyFlag | VersionFlag | JsonFlag | HelpFlag | HeadersFlag |
		//	VerboseFlag | TimeoutFlag;
		@Override public ParserRule getRule() { return rule; }
		
		//ProxyFlag | FormFlag | AuthFlag | DownloadFlag | BodyFlag | VersionFlag | JsonFlag | HelpFlag | HeadersFlag |
		//VerboseFlag | TimeoutFlag
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProxyFlag
		public RuleCall getProxyFlagParserRuleCall_0() { return cProxyFlagParserRuleCall_0; }
		
		//FormFlag
		public RuleCall getFormFlagParserRuleCall_1() { return cFormFlagParserRuleCall_1; }
		
		//AuthFlag
		public RuleCall getAuthFlagParserRuleCall_2() { return cAuthFlagParserRuleCall_2; }
		
		//DownloadFlag
		public RuleCall getDownloadFlagParserRuleCall_3() { return cDownloadFlagParserRuleCall_3; }
		
		//BodyFlag
		public RuleCall getBodyFlagParserRuleCall_4() { return cBodyFlagParserRuleCall_4; }
		
		//VersionFlag
		public RuleCall getVersionFlagParserRuleCall_5() { return cVersionFlagParserRuleCall_5; }
		
		//JsonFlag
		public RuleCall getJsonFlagParserRuleCall_6() { return cJsonFlagParserRuleCall_6; }
		
		//HelpFlag
		public RuleCall getHelpFlagParserRuleCall_7() { return cHelpFlagParserRuleCall_7; }
		
		//HeadersFlag
		public RuleCall getHeadersFlagParserRuleCall_8() { return cHeadersFlagParserRuleCall_8; }
		
		//VerboseFlag
		public RuleCall getVerboseFlagParserRuleCall_9() { return cVerboseFlagParserRuleCall_9; }
		
		//TimeoutFlag
		public RuleCall getTimeoutFlagParserRuleCall_10() { return cTimeoutFlagParserRuleCall_10; }
	}
	public class HeadersFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.HeadersFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeadersFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHeaderKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//HeadersFlag:
		//	{HeadersFlag} ('--header' | '-t');
		@Override public ParserRule getRule() { return rule; }
		
		//{HeadersFlag} ('--header' | '-t')
		public Group getGroup() { return cGroup; }
		
		//{HeadersFlag}
		public Action getHeadersFlagAction_0() { return cHeadersFlagAction_0; }
		
		//'--header' | '-t'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'--header'
		public Keyword getHeaderKeyword_1_0() { return cHeaderKeyword_1_0; }
		
		//'-t'
		public Keyword getTKeyword_1_1() { return cTKeyword_1_1; }
	}
	public class BodyFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.BodyFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cBodyKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BodyFlag:
		//	{BodyFlag} ('--body' | '-b');
		@Override public ParserRule getRule() { return rule; }
		
		//{BodyFlag} ('--body' | '-b')
		public Group getGroup() { return cGroup; }
		
		//{BodyFlag}
		public Action getBodyFlagAction_0() { return cBodyFlagAction_0; }
		
		//'--body' | '-b'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'--body'
		public Keyword getBodyKeyword_1_0() { return cBodyKeyword_1_0; }
		
		//'-b'
		public Keyword getBKeyword_1_1() { return cBKeyword_1_1; }
	}
	public class JsonFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.JsonFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cJsonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cJKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//JsonFlag:
		//	{JsonFlag} ('--json' | '-j');
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonFlag} ('--json' | '-j')
		public Group getGroup() { return cGroup; }
		
		//{JsonFlag}
		public Action getJsonFlagAction_0() { return cJsonFlagAction_0; }
		
		//'--json' | '-j'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'--json'
		public Keyword getJsonKeyword_1_0() { return cJsonKeyword_1_0; }
		
		//'-j'
		public Keyword getJKeyword_1_1() { return cJKeyword_1_1; }
	}
	public class FormFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.FormFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFormKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//FormFlag:
		//	{FormFlag} ('--form' | 'f');
		@Override public ParserRule getRule() { return rule; }
		
		//{FormFlag} ('--form' | 'f')
		public Group getGroup() { return cGroup; }
		
		//{FormFlag}
		public Action getFormFlagAction_0() { return cFormFlagAction_0; }
		
		//'--form' | 'f'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'--form'
		public Keyword getFormKeyword_1_0() { return cFormKeyword_1_0; }
		
		//'f'
		public Keyword getFKeyword_1_1() { return cFKeyword_1_1; }
	}
	public class ProxyFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.ProxyFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProxyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVALUETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cProtocolAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cProtocolAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cProxyProtocolAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cProxyProtocolSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cProxyProtocolAssignment_3_0.eContents().get(0);
		private final Keyword cColonSolidusSolidusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cUsernameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cUsernameSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cUsernameAssignment_4_0.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPasswordAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cPasswordAssignment_4_2.eContents().get(0);
		private final Keyword cAKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cHostnameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHostnameSTRINGTerminalRuleCall_5_0 = (RuleCall)cHostnameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPortAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPortINTTerminalRuleCall_6_1_0 = (RuleCall)cPortAssignment_6_1.eContents().get(0);
		
		//ProxyFlag:
		//	'--proxy' VALUE (protocol=STRING ':')? (proxyProtocol=STRING '://')? (username=STRING ':' password=STRING 'a')?
		//	hostname=STRING (':' port=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'--proxy' VALUE (protocol=STRING ':')? (proxyProtocol=STRING '://')? (username=STRING ':' password=STRING 'a')?
		//hostname=STRING (':' port=INT)?
		public Group getGroup() { return cGroup; }
		
		//'--proxy'
		public Keyword getProxyKeyword_0() { return cProxyKeyword_0; }
		
		//VALUE
		public RuleCall getVALUETerminalRuleCall_1() { return cVALUETerminalRuleCall_1; }
		
		//(protocol=STRING ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//protocol=STRING
		public Assignment getProtocolAssignment_2_0() { return cProtocolAssignment_2_0; }
		
		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_2_0_0() { return cProtocolSTRINGTerminalRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//(proxyProtocol=STRING '://')?
		public Group getGroup_3() { return cGroup_3; }
		
		//proxyProtocol=STRING
		public Assignment getProxyProtocolAssignment_3_0() { return cProxyProtocolAssignment_3_0; }
		
		//STRING
		public RuleCall getProxyProtocolSTRINGTerminalRuleCall_3_0_0() { return cProxyProtocolSTRINGTerminalRuleCall_3_0_0; }
		
		//'://'
		public Keyword getColonSolidusSolidusKeyword_3_1() { return cColonSolidusSolidusKeyword_3_1; }
		
		//(username=STRING ':' password=STRING 'a')?
		public Group getGroup_4() { return cGroup_4; }
		
		//username=STRING
		public Assignment getUsernameAssignment_4_0() { return cUsernameAssignment_4_0; }
		
		//STRING
		public RuleCall getUsernameSTRINGTerminalRuleCall_4_0_0() { return cUsernameSTRINGTerminalRuleCall_4_0_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//password=STRING
		public Assignment getPasswordAssignment_4_2() { return cPasswordAssignment_4_2; }
		
		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_4_2_0() { return cPasswordSTRINGTerminalRuleCall_4_2_0; }
		
		//'a'
		public Keyword getAKeyword_4_3() { return cAKeyword_4_3; }
		
		//hostname=STRING
		public Assignment getHostnameAssignment_5() { return cHostnameAssignment_5; }
		
		//STRING
		public RuleCall getHostnameSTRINGTerminalRuleCall_5_0() { return cHostnameSTRINGTerminalRuleCall_5_0; }
		
		//(':' port=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//':'
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }
		
		//port=INT
		public Assignment getPortAssignment_6_1() { return cPortAssignment_6_1; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_6_1_0() { return cPortINTTerminalRuleCall_6_1_0; }
	}
	public class AuthFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.AuthFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAuthKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cVALUETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cUsernameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsernameSTRINGTerminalRuleCall_2_0 = (RuleCall)cUsernameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPasswordAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cPasswordAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommercialAtKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHostnameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHostnameSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cHostnameAssignment_4_1.eContents().get(0);
		
		//AuthFlag:
		//	('--auth' | '-a') VALUE username=STRING (':' password=STRING)? ('@' hostname=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('--auth' | '-a') VALUE username=STRING (':' password=STRING)? ('@' hostname=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'--auth' | '-a'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'--auth'
		public Keyword getAuthKeyword_0_0() { return cAuthKeyword_0_0; }
		
		//'-a'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//VALUE
		public RuleCall getVALUETerminalRuleCall_1() { return cVALUETerminalRuleCall_1; }
		
		//username=STRING
		public Assignment getUsernameAssignment_2() { return cUsernameAssignment_2; }
		
		//STRING
		public RuleCall getUsernameSTRINGTerminalRuleCall_2_0() { return cUsernameSTRINGTerminalRuleCall_2_0; }
		
		//(':' password=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//password=STRING
		public Assignment getPasswordAssignment_3_1() { return cPasswordAssignment_3_1; }
		
		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_3_1_0() { return cPasswordSTRINGTerminalRuleCall_3_1_0; }
		
		//('@' hostname=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'@'
		public Keyword getCommercialAtKeyword_4_0() { return cCommercialAtKeyword_4_0; }
		
		//hostname=STRING
		public Assignment getHostnameAssignment_4_1() { return cHostnameAssignment_4_1; }
		
		//STRING
		public RuleCall getHostnameSTRINGTerminalRuleCall_4_1_0() { return cHostnameSTRINGTerminalRuleCall_4_1_0; }
	}
	public class DownloadFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.DownloadFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDownloadFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDownloadKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//// TO CHECK IF EMPTY STRING WORKS
		//DownloadFlag:
		//	{DownloadFlag} ('--download' | '-d');
		@Override public ParserRule getRule() { return rule; }
		
		//{DownloadFlag} ('--download' | '-d')
		public Group getGroup() { return cGroup; }
		
		//{DownloadFlag}
		public Action getDownloadFlagAction_0() { return cDownloadFlagAction_0; }
		
		//'--download' | '-d'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'--download'
		public Keyword getDownloadKeyword_1_0() { return cDownloadKeyword_1_0; }
		
		//'-d'
		public Keyword getDKeyword_1_1() { return cDKeyword_1_1; }
	}
	public class HelpFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.HelpFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHelpFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHelpKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//HelpFlag:
		//	{HelpFlag} ('--help' | '-h');
		@Override public ParserRule getRule() { return rule; }
		
		//{HelpFlag} ('--help' | '-h')
		public Group getGroup() { return cGroup; }
		
		//{HelpFlag}
		public Action getHelpFlagAction_0() { return cHelpFlagAction_0; }
		
		//'--help' | '-h'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'--help'
		public Keyword getHelpKeyword_1_0() { return cHelpKeyword_1_0; }
		
		//'-h'
		public Keyword getHKeyword_1_1() { return cHKeyword_1_1; }
	}
	public class VersionFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.VersionFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersionFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VersionFlag:
		//	{VersionFlag}
		//	'--version';
		@Override public ParserRule getRule() { return rule; }
		
		//{VersionFlag} '--version'
		public Group getGroup() { return cGroup; }
		
		//{VersionFlag}
		public Action getVersionFlagAction_0() { return cVersionFlagAction_0; }
		
		//'--version'
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }
	}
	public class VerboseFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.VerboseFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVerboseFlagAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVerboseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cVKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//VerboseFlag:
		//	{VerboseFlag} ('--verbose' | '-v');
		@Override public ParserRule getRule() { return rule; }
		
		//{VerboseFlag} ('--verbose' | '-v')
		public Group getGroup() { return cGroup; }
		
		//{VerboseFlag}
		public Action getVerboseFlagAction_0() { return cVerboseFlagAction_0; }
		
		//'--verbose' | '-v'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'--verbose'
		public Keyword getVerboseKeyword_1_0() { return cVerboseKeyword_1_0; }
		
		//'-v'
		public Keyword getVKeyword_1_1() { return cVKeyword_1_1; }
	}
	public class TimeoutFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.TimeoutFlag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVALUETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTimeoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeoutFLOATTerminalRuleCall_2_0 = (RuleCall)cTimeoutAssignment_2.eContents().get(0);
		
		//TimeoutFlag:
		//	'--timeout' VALUE timeout=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//'--timeout' VALUE timeout=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'--timeout'
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }
		
		//VALUE
		public RuleCall getVALUETerminalRuleCall_1() { return cVALUETerminalRuleCall_1; }
		
		//timeout=FLOAT
		public Assignment getTimeoutAssignment_2() { return cTimeoutAssignment_2; }
		
		//FLOAT
		public RuleCall getTimeoutFLOATTerminalRuleCall_2_0() { return cTimeoutFLOATTerminalRuleCall_2_0; }
	}
	
	public class MethodElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGETGETKeyword_0_0 = (Keyword)cGETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPOSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPOSTPOSTKeyword_1_0 = (Keyword)cPOSTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUTPUTKeyword_2_0 = (Keyword)cPUTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDELETEDELETEKeyword_3_0 = (Keyword)cDELETEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Method:
		//	GET | POST | PUT | DELETE;
		public EnumRule getRule() { return rule; }
		
		//GET | POST | PUT | DELETE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GET
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_0() { return cGETEnumLiteralDeclaration_0; }
		
		//'GET'
		public Keyword getGETGETKeyword_0_0() { return cGETGETKeyword_0_0; }
		
		//POST
		public EnumLiteralDeclaration getPOSTEnumLiteralDeclaration_1() { return cPOSTEnumLiteralDeclaration_1; }
		
		//'POST'
		public Keyword getPOSTPOSTKeyword_1_0() { return cPOSTPOSTKeyword_1_0; }
		
		//PUT
		public EnumLiteralDeclaration getPUTEnumLiteralDeclaration_2() { return cPUTEnumLiteralDeclaration_2; }
		
		//'PUT'
		public Keyword getPUTPUTKeyword_2_0() { return cPUTPUTKeyword_2_0; }
		
		//DELETE
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_3() { return cDELETEEnumLiteralDeclaration_3; }
		
		//'DELETE'
		public Keyword getDELETEDELETEKeyword_3_0() { return cDELETEDELETEKeyword_3_0; }
	}
	
	private final CommandLineInterfaceElements pCommandLineInterface;
	private final FlagElements pFlag;
	private final HeadersFlagElements pHeadersFlag;
	private final BodyFlagElements pBodyFlag;
	private final JsonFlagElements pJsonFlag;
	private final FormFlagElements pFormFlag;
	private final ProxyFlagElements pProxyFlag;
	private final AuthFlagElements pAuthFlag;
	private final DownloadFlagElements pDownloadFlag;
	private final HelpFlagElements pHelpFlag;
	private final VersionFlagElements pVersionFlag;
	private final VerboseFlagElements pVerboseFlag;
	private final TimeoutFlagElements pTimeoutFlag;
	private final MethodElements eMethod;
	private final TerminalRule tWS;
	private final TerminalRule tVALUE;
	private final TerminalRule tDIGIT;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	private final TerminalRule tSTRING;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public CurlBetterThanHttpieGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pCommandLineInterface = new CommandLineInterfaceElements();
		this.pFlag = new FlagElements();
		this.pHeadersFlag = new HeadersFlagElements();
		this.pBodyFlag = new BodyFlagElements();
		this.pJsonFlag = new JsonFlagElements();
		this.pFormFlag = new FormFlagElements();
		this.pProxyFlag = new ProxyFlagElements();
		this.pAuthFlag = new AuthFlagElements();
		this.pDownloadFlag = new DownloadFlagElements();
		this.pHelpFlag = new HelpFlagElements();
		this.pVersionFlag = new VersionFlagElements();
		this.pVerboseFlag = new VerboseFlagElements();
		this.pTimeoutFlag = new TimeoutFlagElements();
		this.eMethod = new MethodElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.WS");
		this.tVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.VALUE");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.DIGIT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.FLOAT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.STRING");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aitchteeteepie.xtext.dsl.CurlBetterThanHttpie.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("aitchteeteepie.xtext.dsl.CurlBetterThanHttpie".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//CommandLineInterface:
	//	{CommandLineInterface}
	//	'http' (WS flags+=Flag)* (WS method=Method)? WS?;
	public CommandLineInterfaceElements getCommandLineInterfaceAccess() {
		return pCommandLineInterface;
	}
	
	public ParserRule getCommandLineInterfaceRule() {
		return getCommandLineInterfaceAccess().getRule();
	}
	
	////WS (protocol=STRING '://')? (url=STRING (':' port=INT)? | (':' (port=INT)?)) ('/' resource=STRING)? (WS '--')? (WS items+=Item)* WS?;
	//// FLAGS
	//Flag:
	//	ProxyFlag | FormFlag | AuthFlag | DownloadFlag | BodyFlag | VersionFlag | JsonFlag | HelpFlag | HeadersFlag |
	//	VerboseFlag | TimeoutFlag;
	public FlagElements getFlagAccess() {
		return pFlag;
	}
	
	public ParserRule getFlagRule() {
		return getFlagAccess().getRule();
	}
	
	//HeadersFlag:
	//	{HeadersFlag} ('--header' | '-t');
	public HeadersFlagElements getHeadersFlagAccess() {
		return pHeadersFlag;
	}
	
	public ParserRule getHeadersFlagRule() {
		return getHeadersFlagAccess().getRule();
	}
	
	//BodyFlag:
	//	{BodyFlag} ('--body' | '-b');
	public BodyFlagElements getBodyFlagAccess() {
		return pBodyFlag;
	}
	
	public ParserRule getBodyFlagRule() {
		return getBodyFlagAccess().getRule();
	}
	
	//JsonFlag:
	//	{JsonFlag} ('--json' | '-j');
	public JsonFlagElements getJsonFlagAccess() {
		return pJsonFlag;
	}
	
	public ParserRule getJsonFlagRule() {
		return getJsonFlagAccess().getRule();
	}
	
	//FormFlag:
	//	{FormFlag} ('--form' | 'f');
	public FormFlagElements getFormFlagAccess() {
		return pFormFlag;
	}
	
	public ParserRule getFormFlagRule() {
		return getFormFlagAccess().getRule();
	}
	
	//ProxyFlag:
	//	'--proxy' VALUE (protocol=STRING ':')? (proxyProtocol=STRING '://')? (username=STRING ':' password=STRING 'a')?
	//	hostname=STRING (':' port=INT)?;
	public ProxyFlagElements getProxyFlagAccess() {
		return pProxyFlag;
	}
	
	public ParserRule getProxyFlagRule() {
		return getProxyFlagAccess().getRule();
	}
	
	//AuthFlag:
	//	('--auth' | '-a') VALUE username=STRING (':' password=STRING)? ('@' hostname=STRING)?;
	public AuthFlagElements getAuthFlagAccess() {
		return pAuthFlag;
	}
	
	public ParserRule getAuthFlagRule() {
		return getAuthFlagAccess().getRule();
	}
	
	//// TO CHECK IF EMPTY STRING WORKS
	//DownloadFlag:
	//	{DownloadFlag} ('--download' | '-d');
	public DownloadFlagElements getDownloadFlagAccess() {
		return pDownloadFlag;
	}
	
	public ParserRule getDownloadFlagRule() {
		return getDownloadFlagAccess().getRule();
	}
	
	//HelpFlag:
	//	{HelpFlag} ('--help' | '-h');
	public HelpFlagElements getHelpFlagAccess() {
		return pHelpFlag;
	}
	
	public ParserRule getHelpFlagRule() {
		return getHelpFlagAccess().getRule();
	}
	
	//VersionFlag:
	//	{VersionFlag}
	//	'--version';
	public VersionFlagElements getVersionFlagAccess() {
		return pVersionFlag;
	}
	
	public ParserRule getVersionFlagRule() {
		return getVersionFlagAccess().getRule();
	}
	
	//VerboseFlag:
	//	{VerboseFlag} ('--verbose' | '-v');
	public VerboseFlagElements getVerboseFlagAccess() {
		return pVerboseFlag;
	}
	
	public ParserRule getVerboseFlagRule() {
		return getVerboseFlagAccess().getRule();
	}
	
	//TimeoutFlag:
	//	'--timeout' VALUE timeout=FLOAT;
	public TimeoutFlagElements getTimeoutFlagAccess() {
		return pTimeoutFlag;
	}
	
	public ParserRule getTimeoutFlagRule() {
		return getTimeoutFlagAccess().getRule();
	}
	
	//enum Method:
	//	GET | POST | PUT | DELETE;
	public MethodElements getMethodAccess() {
		return eMethod;
	}
	
	public EnumRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal VALUE:
	//	'=' | WS;
	public TerminalRule getVALUERule() {
		return tVALUE;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0' | '1'..'9' DIGIT*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	INT | INT? '.' DIGIT* (('E' | 'e') INT)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
