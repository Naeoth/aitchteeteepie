/*
 * generated by Xtext 2.13.0
 */
package aitchteeteepie.xtext.dsl.serializer;

import aitchteeteepie.AitchteeteepiePackage;
import aitchteeteepie.AuthFlag;
import aitchteeteepie.BodyFlag;
import aitchteeteepie.CommandLineInterface;
import aitchteeteepie.DataFieldItem;
import aitchteeteepie.DownloadFlag;
import aitchteeteepie.FormFileFieldItem;
import aitchteeteepie.FormFlag;
import aitchteeteepie.HeadersFlag;
import aitchteeteepie.HelpFlag;
import aitchteeteepie.HttpHeaderItem;
import aitchteeteepie.JsonArray;
import aitchteeteepie.JsonBoolean;
import aitchteeteepie.JsonFlag;
import aitchteeteepie.JsonNumber;
import aitchteeteepie.JsonObject;
import aitchteeteepie.ProxyFlag;
import aitchteeteepie.RawJsonFieldItem;
import aitchteeteepie.TimeoutFlag;
import aitchteeteepie.UrlParameterItem;
import aitchteeteepie.VerboseFlag;
import aitchteeteepie.VersionFlag;
import aitchteeteepie.xtext.dsl.services.CurlBetterThanHttpieGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CurlBetterThanHttpieSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CurlBetterThanHttpieGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AitchteeteepiePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AitchteeteepiePackage.AUTH_FLAG:
				sequence_AuthFlag(context, (AuthFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.BODY_FLAG:
				sequence_BodyFlag(context, (BodyFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.COMMAND_LINE_INTERFACE:
				sequence_CommandLineInterface(context, (CommandLineInterface) semanticObject); 
				return; 
			case AitchteeteepiePackage.DATA_FIELD_ITEM:
				sequence_DataFieldItem(context, (DataFieldItem) semanticObject); 
				return; 
			case AitchteeteepiePackage.DOWNLOAD_FLAG:
				sequence_DownloadFlag(context, (DownloadFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.FORM_FILE_FIELD_ITEM:
				sequence_FormFileFieldItem(context, (FormFileFieldItem) semanticObject); 
				return; 
			case AitchteeteepiePackage.FORM_FLAG:
				sequence_FormFlag(context, (FormFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.HEADERS_FLAG:
				sequence_HeadersFlag(context, (HeadersFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.HELP_FLAG:
				sequence_HelpFlag(context, (HelpFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.HTTP_HEADER_ITEM:
				sequence_HttpHeaderItem(context, (HttpHeaderItem) semanticObject); 
				return; 
			case AitchteeteepiePackage.JSON_ARRAY:
				sequence_JsonArray(context, (JsonArray) semanticObject); 
				return; 
			case AitchteeteepiePackage.JSON_BOOLEAN:
				sequence_JsonBoolean(context, (JsonBoolean) semanticObject); 
				return; 
			case AitchteeteepiePackage.JSON_FLAG:
				sequence_JsonFlag(context, (JsonFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.JSON_NUMBER:
				sequence_JsonNumber(context, (JsonNumber) semanticObject); 
				return; 
			case AitchteeteepiePackage.JSON_OBJECT:
				sequence_JsonObject(context, (JsonObject) semanticObject); 
				return; 
			case AitchteeteepiePackage.PROXY_FLAG:
				sequence_ProxyFlag(context, (ProxyFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.RAW_JSON_FIELD_ITEM:
				sequence_RawJsonFieldItem(context, (RawJsonFieldItem) semanticObject); 
				return; 
			case AitchteeteepiePackage.TIMEOUT_FLAG:
				sequence_TimeoutFlag(context, (TimeoutFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.URL_PARAMETER_ITEM:
				sequence_UrlParameterItem(context, (UrlParameterItem) semanticObject); 
				return; 
			case AitchteeteepiePackage.VERBOSE_FLAG:
				sequence_VerboseFlag(context, (VerboseFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.VERSION_FLAG:
				sequence_VersionFlag(context, (VersionFlag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Flag returns AuthFlag
	 *     AuthFlag returns AuthFlag
	 *
	 * Constraint:
	 *     (username=STRING password=STRING? hostname=STRING?)
	 */
	protected void sequence_AuthFlag(ISerializationContext context, AuthFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns BodyFlag
	 *     BodyFlag returns BodyFlag
	 *
	 * Constraint:
	 *     {BodyFlag}
	 */
	protected void sequence_BodyFlag(ISerializationContext context, BodyFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandLineInterface returns CommandLineInterface
	 *
	 * Constraint:
	 *     (
	 *         flags+=Flag* 
	 *         method=Method? 
	 *         protocol=STRING? 
	 *         ((url=STRING port=INT?) | port=INT)? 
	 *         resource=STRING? 
	 *         items+=Item*
	 *     )
	 */
	protected void sequence_CommandLineInterface(ISerializationContext context, CommandLineInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Item returns DataFieldItem
	 *     DataFieldItem returns DataFieldItem
	 *
	 * Constraint:
	 *     (field=STRING (value=STRING | value=STRING))
	 */
	protected void sequence_DataFieldItem(ISerializationContext context, DataFieldItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns DownloadFlag
	 *     DownloadFlag returns DownloadFlag
	 *
	 * Constraint:
	 *     {DownloadFlag}
	 */
	protected void sequence_DownloadFlag(ISerializationContext context, DownloadFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Item returns FormFileFieldItem
	 *     FormFileFieldItem returns FormFileFieldItem
	 *
	 * Constraint:
	 *     (field=STRING value=STRING)
	 */
	protected void sequence_FormFileFieldItem(ISerializationContext context, FormFileFieldItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AitchteeteepiePackage.Literals.ITEM__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AitchteeteepiePackage.Literals.ITEM__FIELD));
			if (transientValues.isValueTransient(semanticObject, AitchteeteepiePackage.Literals.FORM_FILE_FIELD_ITEM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AitchteeteepiePackage.Literals.FORM_FILE_FIELD_ITEM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFormFileFieldItemAccess().getFieldSTRINGTerminalRuleCall_0_0(), semanticObject.getField());
		feeder.accept(grammarAccess.getFormFileFieldItemAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns FormFlag
	 *     FormFlag returns FormFlag
	 *
	 * Constraint:
	 *     {FormFlag}
	 */
	protected void sequence_FormFlag(ISerializationContext context, FormFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns HeadersFlag
	 *     HeadersFlag returns HeadersFlag
	 *
	 * Constraint:
	 *     {HeadersFlag}
	 */
	protected void sequence_HeadersFlag(ISerializationContext context, HeadersFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns HelpFlag
	 *     HelpFlag returns HelpFlag
	 *
	 * Constraint:
	 *     {HelpFlag}
	 */
	protected void sequence_HelpFlag(ISerializationContext context, HelpFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Item returns HttpHeaderItem
	 *     HttpHeaderItem returns HttpHeaderItem
	 *
	 * Constraint:
	 *     (field=STRING value=STRING)
	 */
	protected void sequence_HttpHeaderItem(ISerializationContext context, HttpHeaderItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AitchteeteepiePackage.Literals.ITEM__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AitchteeteepiePackage.Literals.ITEM__FIELD));
			if (transientValues.isValueTransient(semanticObject, AitchteeteepiePackage.Literals.HTTP_HEADER_ITEM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AitchteeteepiePackage.Literals.HTTP_HEADER_ITEM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHttpHeaderItemAccess().getFieldSTRINGTerminalRuleCall_0_0(), semanticObject.getField());
		feeder.accept(grammarAccess.getHttpHeaderItemAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonType returns JsonArray
	 *     JsonArray returns JsonArray
	 *
	 * Constraint:
	 *     {JsonArray}
	 */
	protected void sequence_JsonArray(ISerializationContext context, JsonArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonType returns JsonBoolean
	 *     JsonBoolean returns JsonBoolean
	 *
	 * Constraint:
	 *     {JsonBoolean}
	 */
	protected void sequence_JsonBoolean(ISerializationContext context, JsonBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns JsonFlag
	 *     JsonFlag returns JsonFlag
	 *
	 * Constraint:
	 *     {JsonFlag}
	 */
	protected void sequence_JsonFlag(ISerializationContext context, JsonFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonType returns JsonNumber
	 *     JsonNumber returns JsonNumber
	 *
	 * Constraint:
	 *     {JsonNumber}
	 */
	protected void sequence_JsonNumber(ISerializationContext context, JsonNumber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonType returns JsonObject
	 *     JsonObject returns JsonObject
	 *
	 * Constraint:
	 *     {JsonObject}
	 */
	protected void sequence_JsonObject(ISerializationContext context, JsonObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns ProxyFlag
	 *     ProxyFlag returns ProxyFlag
	 *
	 * Constraint:
	 *     (protocol=STRING? proxyProtocol=STRING? (username=STRING password=STRING)? hostname=STRING port=INT?)
	 */
	protected void sequence_ProxyFlag(ISerializationContext context, ProxyFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Item returns RawJsonFieldItem
	 *     RawJsonFieldItem returns RawJsonFieldItem
	 *
	 * Constraint:
	 *     {RawJsonFieldItem}
	 */
	protected void sequence_RawJsonFieldItem(ISerializationContext context, RawJsonFieldItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns TimeoutFlag
	 *     TimeoutFlag returns TimeoutFlag
	 *
	 * Constraint:
	 *     timeout=FLOAT
	 */
	protected void sequence_TimeoutFlag(ISerializationContext context, TimeoutFlag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AitchteeteepiePackage.Literals.TIMEOUT_FLAG__TIMEOUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AitchteeteepiePackage.Literals.TIMEOUT_FLAG__TIMEOUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutFlagAccess().getTimeoutFLOATTerminalRuleCall_2_0(), semanticObject.getTimeout());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Item returns UrlParameterItem
	 *     UrlParameterItem returns UrlParameterItem
	 *
	 * Constraint:
	 *     (field=STRING value=STRING)
	 */
	protected void sequence_UrlParameterItem(ISerializationContext context, UrlParameterItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AitchteeteepiePackage.Literals.ITEM__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AitchteeteepiePackage.Literals.ITEM__FIELD));
			if (transientValues.isValueTransient(semanticObject, AitchteeteepiePackage.Literals.URL_PARAMETER_ITEM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AitchteeteepiePackage.Literals.URL_PARAMETER_ITEM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUrlParameterItemAccess().getFieldSTRINGTerminalRuleCall_0_0(), semanticObject.getField());
		feeder.accept(grammarAccess.getUrlParameterItemAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns VerboseFlag
	 *     VerboseFlag returns VerboseFlag
	 *
	 * Constraint:
	 *     {VerboseFlag}
	 */
	protected void sequence_VerboseFlag(ISerializationContext context, VerboseFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns VersionFlag
	 *     VersionFlag returns VersionFlag
	 *
	 * Constraint:
	 *     {VersionFlag}
	 */
	protected void sequence_VersionFlag(ISerializationContext context, VersionFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
