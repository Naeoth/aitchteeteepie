/*
 * generated by Xtext 2.13.0
 */
package aitchteeteepie.xtext.dsl.serializer;

import aitchteeteepie.AitchteeteepiePackage;
import aitchteeteepie.BodyFlag;
import aitchteeteepie.CommandLineInterface;
import aitchteeteepie.DownloadFlag;
import aitchteeteepie.FormFlag;
import aitchteeteepie.HeadersFlag;
import aitchteeteepie.HelpFlag;
import aitchteeteepie.JsonFlag;
import aitchteeteepie.ProxyFlag;
import aitchteeteepie.VerboseFlag;
import aitchteeteepie.VersionFlag;
import aitchteeteepie.xtext.dsl.services.CurlBetterThanHttpieGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class CurlBetterThanHttpieSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CurlBetterThanHttpieGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AitchteeteepiePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AitchteeteepiePackage.BODY_FLAG:
				sequence_BodyFlag(context, (BodyFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.COMMAND_LINE_INTERFACE:
				sequence_CommandLineInterface(context, (CommandLineInterface) semanticObject); 
				return; 
			case AitchteeteepiePackage.DOWNLOAD_FLAG:
				sequence_DownloadFlag(context, (DownloadFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.FORM_FLAG:
				sequence_FormFlag(context, (FormFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.HEADERS_FLAG:
				sequence_HeadersFlag(context, (HeadersFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.HELP_FLAG:
				sequence_HelpFlag(context, (HelpFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.JSON_FLAG:
				sequence_JsonFlag(context, (JsonFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.PROXY_FLAG:
				sequence_ProxyFlag(context, (ProxyFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.VERBOSE_FLAG:
				sequence_VerboseFlag(context, (VerboseFlag) semanticObject); 
				return; 
			case AitchteeteepiePackage.VERSION_FLAG:
				sequence_VersionFlag(context, (VersionFlag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Flag returns BodyFlag
	 *     BodyFlag returns BodyFlag
	 *
	 * Constraint:
	 *     {BodyFlag}
	 */
	protected void sequence_BodyFlag(ISerializationContext context, BodyFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandLineInterface returns CommandLineInterface
	 *
	 * Constraint:
	 *     flags+=Flag*
	 */
	protected void sequence_CommandLineInterface(ISerializationContext context, CommandLineInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns DownloadFlag
	 *     DownloadFlag returns DownloadFlag
	 *
	 * Constraint:
	 *     {DownloadFlag}
	 */
	protected void sequence_DownloadFlag(ISerializationContext context, DownloadFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns FormFlag
	 *     FormFlag returns FormFlag
	 *
	 * Constraint:
	 *     {FormFlag}
	 */
	protected void sequence_FormFlag(ISerializationContext context, FormFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns HeadersFlag
	 *     HeadersFlag returns HeadersFlag
	 *
	 * Constraint:
	 *     {HeadersFlag}
	 */
	protected void sequence_HeadersFlag(ISerializationContext context, HeadersFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns HelpFlag
	 *     HelpFlag returns HelpFlag
	 *
	 * Constraint:
	 *     {HelpFlag}
	 */
	protected void sequence_HelpFlag(ISerializationContext context, HelpFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns JsonFlag
	 *     JsonFlag returns JsonFlag
	 *
	 * Constraint:
	 *     {JsonFlag}
	 */
	protected void sequence_JsonFlag(ISerializationContext context, JsonFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns ProxyFlag
	 *     ProxyFlag returns ProxyFlag
	 *
	 * Constraint:
	 *     (((protocol=BASIC_STRING proxyProtocol=BASIC_STRING?) | proxyProtocol=BASIC_STRING) (username=STRING_UP password=STRING_UP)?)
	 */
	protected void sequence_ProxyFlag(ISerializationContext context, ProxyFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns VerboseFlag
	 *     VerboseFlag returns VerboseFlag
	 *
	 * Constraint:
	 *     {VerboseFlag}
	 */
	protected void sequence_VerboseFlag(ISerializationContext context, VerboseFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Flag returns VersionFlag
	 *     VersionFlag returns VersionFlag
	 *
	 * Constraint:
	 *     {VersionFlag}
	 */
	protected void sequence_VersionFlag(ISerializationContext context, VersionFlag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
