/*
 * generated by Xtext 2.13.0
 */
package aitchteeteepie.xtext.dsl.ide.contentassist.antlr;

import aitchteeteepie.xtext.dsl.ide.contentassist.antlr.internal.InternalCurlBetterThanHttpieParser;
import aitchteeteepie.xtext.dsl.services.CurlBetterThanHttpieGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CurlBetterThanHttpieParser extends AbstractContentAssistParser {

	@Inject
	private CurlBetterThanHttpieGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCurlBetterThanHttpieParser createParser() {
		InternalCurlBetterThanHttpieParser result = new InternalCurlBetterThanHttpieParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFlagAccess().getAlternatives(), "rule__Flag__Alternatives");
					put(grammarAccess.getHeadersFlagAccess().getAlternatives_1(), "rule__HeadersFlag__Alternatives_1");
					put(grammarAccess.getBodyFlagAccess().getAlternatives_1(), "rule__BodyFlag__Alternatives_1");
					put(grammarAccess.getJsonFlagAccess().getAlternatives_1(), "rule__JsonFlag__Alternatives_1");
					put(grammarAccess.getFormFlagAccess().getAlternatives_1(), "rule__FormFlag__Alternatives_1");
					put(grammarAccess.getProxyFlagAccess().getAlternatives_1(), "rule__ProxyFlag__Alternatives_1");
					put(grammarAccess.getAuthFlagAccess().getAlternatives_0(), "rule__AuthFlag__Alternatives_0");
					put(grammarAccess.getAuthFlagAccess().getAlternatives_1(), "rule__AuthFlag__Alternatives_1");
					put(grammarAccess.getDownloadFlagAccess().getAlternatives_1(), "rule__DownloadFlag__Alternatives_1");
					put(grammarAccess.getHelpFlagAccess().getAlternatives_1(), "rule__HelpFlag__Alternatives_1");
					put(grammarAccess.getVerboseFlagAccess().getAlternatives_1(), "rule__VerboseFlag__Alternatives_1");
					put(grammarAccess.getTimeoutFlagAccess().getAlternatives_1(), "rule__TimeoutFlag__Alternatives_1");
					put(grammarAccess.getCommandLineInterfaceAccess().getGroup(), "rule__CommandLineInterface__Group__0");
					put(grammarAccess.getCommandLineInterfaceAccess().getGroup_2(), "rule__CommandLineInterface__Group_2__0");
					put(grammarAccess.getHeadersFlagAccess().getGroup(), "rule__HeadersFlag__Group__0");
					put(grammarAccess.getBodyFlagAccess().getGroup(), "rule__BodyFlag__Group__0");
					put(grammarAccess.getJsonFlagAccess().getGroup(), "rule__JsonFlag__Group__0");
					put(grammarAccess.getFormFlagAccess().getGroup(), "rule__FormFlag__Group__0");
					put(grammarAccess.getProxyFlagAccess().getGroup(), "rule__ProxyFlag__Group__0");
					put(grammarAccess.getProxyFlagAccess().getGroup_2(), "rule__ProxyFlag__Group_2__0");
					put(grammarAccess.getAuthFlagAccess().getGroup(), "rule__AuthFlag__Group__0");
					put(grammarAccess.getDownloadFlagAccess().getGroup(), "rule__DownloadFlag__Group__0");
					put(grammarAccess.getHelpFlagAccess().getGroup(), "rule__HelpFlag__Group__0");
					put(grammarAccess.getVersionFlagAccess().getGroup(), "rule__VersionFlag__Group__0");
					put(grammarAccess.getVerboseFlagAccess().getGroup(), "rule__VerboseFlag__Group__0");
					put(grammarAccess.getTimeoutFlagAccess().getGroup(), "rule__TimeoutFlag__Group__0");
					put(grammarAccess.getCommandLineInterfaceAccess().getFlagsAssignment_2_1(), "rule__CommandLineInterface__FlagsAssignment_2_1");
					put(grammarAccess.getProxyFlagAccess().getProtocolAssignment_2_0(), "rule__ProxyFlag__ProtocolAssignment_2_0");
					put(grammarAccess.getTimeoutFlagAccess().getTimeoutAssignment_2(), "rule__TimeoutFlag__TimeoutAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public CurlBetterThanHttpieGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CurlBetterThanHttpieGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
